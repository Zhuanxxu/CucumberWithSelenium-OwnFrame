buildscript {
    repositories {
        jcenter()
    }
}


apply plugin: 'java'


group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

//Con esto el compilador de java puede interpretar UTF-8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    implementation 'org.seleniumhq.selenium:selenium-java:4.8.3'
    implementation 'org.json:json:20220924'


    implementation 'io.cucumber:cucumber-java:7.9.0'
    testImplementation("io.cucumber:cucumber-junit-platform-engine:latest.release") {
        because("we want to use Cucumber with JUnit 5")
    }
    testImplementation("org.junit.platform:junit-platform-suite:latest.release") {
        because("we want to use the JUnit 5 @Suite annotation to select/run Cucumber tests")
    }

}


// gradle clean test -PenvFile=qa.properties

def envFile = !project.hasProperty("envFile") ? "qa.properties" : project.properties['envFile']
test {
    systemProperty("envFile", envFile.toString())
    useJUnitPlatform()
}

def testSuite = !project.hasProperty("testSuite") ? "Acceptance" : project.properties['testSuite']
def tags = tasks.register("tags", Test) {
    systemProperty("envFile", envFile.toString())
    systemProperty("testSuite", testSuite.toString())
    useJUnitPlatform {
        includeTags testSuite
    }
}

tasks {
    test {
        // REQUIRED: Tell Gradle to use the JUnit 5 platform to execute tests
        // see https://docs.gradle.org/current/userguide/java_testing.html#using_junit5
        useJUnitPlatform {
            // OPTIONAL: Exclude all tests (examples/scenarios) annotated with @disabled by default
            excludeTags("disabled")
            // OPTIONAL: Include only specified tags using JUnit5 tag expressions
            if (project.hasProperty("includeTags")) includeTags(project.property("includeTags") as String)
        }
        // OPTIONAL: Ignore test failures so that build pipelines won't get blocked by failing examples/scenarios
        ignoreFailures = true
        // OPTIONAL: Copy all system properties from the command line (-D...) to the test environment
        systemProperties(project.gradle.startParameter.systemPropertiesArgs)
        // OPTIONAL: Enable parallel test execution
        systemProperty("cucumber.execution.parallel.enabled", false)
        // OPTIONAL: Set parallel execution strategy (defaults to dynamic)
        systemProperty("cucumber.execution.parallel.config.strategy", "fixed")
        // OPTIONAL: Set the fixed number of parallel test executions. Only works for the "fixed" strategy defined above
        systemProperty("cucumber.execution.parallel.config.fixed.parallelism", 4)
        // OPTIONAL: Enable Cucumber plugins, enable/disable as desired
        systemProperty("cucumber.plugin", "message:build/reports/cucumber.ndjson, timeline:build/reports/timeline, html:build/reports/cucumber.html")
        // OPTIONAL: Improve readability of test names in reports
        systemProperty("cucumber.junit-platform.naming-strategy", "long")
        // OPTIONAL: Don't show Cucumber ads
        systemProperty("cucumber.publish.quiet", "true")
        // OPTIONAL: Force test execution even if they are up-to-date according to Gradle
        outputs.upToDateWhen { false }
    }
}



